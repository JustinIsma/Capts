import tkinter as tk
from tkinter import *
from tkinter import messagebox
import hashlib
import sqlite3


# Database setup
def setup_database():
    conn = sqlite3.connect("employees.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS Employees
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT NOT NULL,
                       age INTEGER,
                       gender TEXT,
                       address TEXT,
                       email TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS Managers
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT NOT NULL,
                       email TEXT)''')
    conn.commit()
    conn.close()

def hash_password(password):
    """Hash a password for storing."""
    return hashlib.sha256(password.encode()).hexdigest()

# Initialize the database
setup_database()

# Dictionary to store user accounts
users = {
    "admin": hash_password("admin")
}

# Function to load employees from the database
def load_employees():
    conn = sqlite3.connect("employees.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM Employees")
    employees = [row[0] for row in cursor.fetchall()]
    conn.close()
    return employees

# Function to load managers from the database
def load_managers():
    conn = sqlite3.connect("employees.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM Managers")
    managers = [row[0] for row in cursor.fetchall()]
    conn.close()
    return managers

def login():
    """Log in to an existing account."""
    username = username_entry.get()
    password = password_entry.get()
    hashed_password = hash_password(password)
    if username in users and users[username] == hashed_password:
        messagebox.showinfo("Success", "Login successful!")
        open_main_page()
    else:
        messagebox.showerror("Error", "Invalid username or password.")
    username_entry.delete(0, tk.END)
    password_entry.delete(0, tk.END)

def open_main_page():
    """Open the main page after successful login."""
    global main_window
    login_window.destroy()

    # Create the main window
    main_window = tk.Tk()
    main_window.title("Main Page")
    main_window.geometry("500x700")
    

    # Add image file 
    bg = PhotoImage(file = "newlog.png") 
  
    # Show image using label 
    label1 = Label( main_window, image = bg) 
    label1.place(x = 0, y = 0) 
    
    # Create Frame 
    frame1 = Frame(main_window) 
    frame1.pack(pady = 2 )

    # Add a welcome label
    welcome_label = tk.Label(main_window, text="Welcome to Zid Ratlook Employee Management!", bg="#e6e6fa", fg="black", font=("Arial", 16))
    welcome_label.pack(pady=20)

    # Create a frame for buttons on the left side
    button_frame = tk.Frame(main_window, bg="#e6e6fa")
    button_frame.pack(side=tk.LEFT, padx=20, pady=20, fill=tk.Y)

    # Add buttons
    add_employee_button = tk.Button(button_frame, text="Add Employee", command=add_employee, bg="#ffd700", fg="black")
    add_employee_button.pack(pady=5, fill=tk.X)

    add_manager_button = tk.Button(button_frame, text="Add Manager", command=add_manager, bg="#ffd700", fg="black")
    add_manager_button.pack(pady=5, fill=tk.X)

    remove_employee_button = tk.Button(button_frame, text="Remove Employee", command=remove_employee, bg="#ffd700", fg="black")
    remove_employee_button.pack(pady=5, fill=tk.X)

    print_button = tk.Button(button_frame, text="Print Attendance", command=print_attendance, bg="#ffd700", fg="black")
    print_button.pack(pady=5, fill=tk.X)

    # Listbox to display employees and managers
    global employee_listbox
    employee_listbox = tk.Listbox(main_window, width=50, height=10, bg="#e6e6fa")
    employee_listbox.pack(side=tk.LEFT, padx=20, pady=20, fill=tk.BOTH, expand=True)

    logout_button = tk.Button(main_window, text="Logout", command=logout, bg="#ffd700", fg="black")
    logout_button.pack(side=tk.BOTTOM, anchor=tk.SE, padx=20, pady=20)

    main_window.mainloop()

def logout():
    """Logout and return to the login page."""
    main_window.destroy()
    main()

def add_employee():
    """Add a new employee."""
    add_window = tk.Toplevel()
    add_window.title("Add Employee")
    add_window.geometry("400x300")
    add_window.configure(bg="#e6e6fa")

    add_frame = tk.Frame(add_window, bg="#e6e6fa")
    add_frame.pack(pady=20)

    tk.Label(add_frame, text="Full Name:", bg="#e6e6fa", fg="black").grid(row=0, column=0, padx=5, pady=5)
    global add_entry
    add_entry = tk.Entry(add_frame, width=20)
    add_entry.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(add_frame, text="Age:", bg="#e6e6fa", fg="black").grid(row=1, column=0, padx=5, pady=5)
    global age_entry
    age_entry = tk.Entry(add_frame, width=20)
    age_entry.grid(row=1, column=1, padx=5, pady=5)

    tk.Label(add_frame, text="Gender:", bg="#e6e6fa", fg="black").grid(row=2, column=0, padx=5, pady=5)
    global gender_var
    gender_var = tk.StringVar(value="")  # Set default value to an empty string
    male_button = tk.Radiobutton(add_frame, text="Male", variable=gender_var, value="male", bg="#e6e6fa", fg="black")
    male_button.grid(row=2, column=1, sticky=tk.W, padx=5, pady=5)
    female_button = tk.Radiobutton(add_frame, text="Female", variable=gender_var, value="female", bg="#e6e6fa", fg="black")
    female_button.grid(row=2, column=2, sticky=tk.W, padx=5, pady=5)

    tk.Label(add_frame, text="Address:", bg="#e6e6fa", fg="black").grid(row=3, column=0, padx=5, pady=5)
    global address_entry
    address_entry = tk.Entry(add_frame, width=20)
    address_entry.grid(row=3, column=1, padx=5, pady=5)

    tk.Label(add_frame, text="Email:", bg="#e6e6fa", fg="black").grid(row=4, column=0, padx=5, pady=5)
    global email_entry
    email_entry = tk.Entry(add_frame, width=20)
    email_entry.grid(row=4, column=1, padx=5, pady=5)

    tk.Button(add_frame, text="Add", command=confirm_add_employee, bg="#ffd700", fg="black").grid(row=5, column=0, columnspan=3, pady=10)

def confirm_add_employee():
    """Confirm adding a new employee."""
    name = add_entry.get()
    age = age_entry.get()
    gender = gender_var.get()
    address = address_entry.get()
    email = email_entry.get()

    if name and age and gender and address and email:
        if messagebox.askyesno("Confirm", "Do you want to add this employee?"):
            conn = sqlite3.connect("employees.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO Employees (name, age, gender, address, email) VALUES (?, ?, ?, ?, ?)",
                           (name, age, gender, address, email))
            conn.commit()
            conn.close()

            add_entry.delete(0, tk.END)
            age_entry.delete(0, tk.END)
            address_entry.delete(0, tk.END)
            email_entry.delete(0, tk.END)
            gender_var.set("")  # Reset the gender selection
            messagebox.showinfo("Success", "Employee added successfully!")
        else:
            messagebox.showerror("Error", "Please fill all fields.")

def add_manager():
    """Add a new manager."""
    add_window = tk.Toplevel()
    add_window.title("Add Manager")
    add_window.geometry("300x200")
    add_window.configure(bg="#e6e6fa")

    add_frame = tk.Frame(add_window, bg="#e6e6fa")
    add_frame.pack(pady=20)

    tk.Label(add_frame, text="Full Name:", bg="#e6e6fa", fg="black").grid(row=0, column=0, padx=5, pady=5)
    global manager_name_entry
    manager_name_entry = tk.Entry(add_frame, width=20)
    manager_name_entry.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(add_frame, text="Email:", bg="#e6e6fa", fg="black").grid(row=1, column=0, padx=5, pady=5)
    global manager_email_entry
    manager_email_entry = tk.Entry(add_frame, width=20)
    manager_email_entry.grid(row=1, column=1, padx=5, pady=5)

    tk.Button(add_frame, text="Add", command=confirm_add_manager, bg="#ffd700", fg="black").grid(row=2, column=0, columnspan=2, pady=10)

def confirm_add_manager():
    """Confirm adding a new manager."""
    name = manager_name_entry.get()
    email = manager_email_entry.get()

    if name and email:
        if messagebox.askyesno("Confirm", "Do you want to add this manager?"):
            conn = sqlite3.connect("employees.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO Managers (name, email) VALUES (?, ?)",
                           (name, email))
            conn.commit()
            conn.close()

            manager_name_entry.delete(0, tk.END)
            manager_email_entry.delete(0, tk.END)
            messagebox.showinfo("Success", "Manager added successfully!")
        else:
            messagebox.showerror("Error", "Please fill all fields.")

def remove_employee():
    """Remove an employee."""
    selected_index = employee_listbox.curselection()
    if selected_index:
        employee_name = employee_listbox.get(selected_index)
        
        conn = sqlite3.connect("employees.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM Employees WHERE name = ?", (employee_name,))
        conn.commit()
        conn.close()

        employee_listbox.delete(selected_index)
        messagebox.showinfo("Success", "Employee removed successfully!")
    else:
        messagebox.showerror("Error", "Please select an employee to remove.")

def print_attendance():
    """Print attendance for all employees and managers."""
    employees = load_employees()
    managers = load_managers()
    all_personnel = employees + managers

    if all_personnel:
        attendance_message = "Attendance Report:\n" + "\n".join(all_personnel)
        messagebox.showinfo("Attendance", attendance_message)

        # Clear the Listbox and populate with all personnel
        employee_listbox.delete(0, tk.END)
        for person in all_personnel:
            employee_listbox.insert(tk.END, person)
    else:
        messagebox.showinfo("Attendance", "No personnel to display.")

def main():
    global username_entry, password_entry, login_window

    # Create the login window
    login_window = tk.Tk()
    login_window.title("Login System")
    login_window.geometry("300x200")
    login_window.configure(bg="#e6e6fa")

    # Create a frame for the login form
    frame = tk.Frame(login_window, bg="#e6e6fa")
    frame.pack(pady=20)

    # Username label and entry
    username_label = tk.Label(frame, text="Username:", bg="#e6e6fa", fg="black")
    username_label.grid(row=0, column=0, padx=5, pady=5)
    username_entry = tk.Entry(frame, width=20)
    username_entry.grid(row=0, column=1, padx=5, pady=5)
    username_entry.focus_set()

    # Password label and entry
    password_label = tk.Label(frame, text="Password:", bg="#e6e6fa", fg="black")
    password_label.grid(row=1, column=0, padx=5, pady=5)
    password_entry = tk.Entry(frame, width=20, show="*")
    password_entry.grid(row=1, column=1, padx=5, pady=5)
    password_entry.bind("<Return>", lambda event: login())

    # Login button
    login_button = tk.Button(frame, text="Login", command=login, bg="#ffd700", fg="black")
    login_button.grid(row=2, column=0, columnspan=2, pady=10)

    login_window.mainloop()

if __name__ == "__main__":
    main()
